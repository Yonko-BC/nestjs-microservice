// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: proto/document.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "document";

export interface DocumentChunk {
  content: Uint8Array;
  filename: string;
  contentType: string;
  chunkNumber: number;
  isLastChunk: boolean;
  size: number;
}

export interface UploadResponse {
  message: string;
  documentId: string;
  size: number;
}

export interface DownloadRequest {
  documentId: string;
}

export const DOCUMENT_PACKAGE_NAME = "document";

export interface DocumentServiceClient {
  uploadDocument(request: Observable<DocumentChunk>): Observable<UploadResponse>;

  downloadDocument(request: DownloadRequest): Observable<DocumentChunk>;

  syncDocument(request: Observable<DocumentChunk>): Observable<DocumentChunk>;
}

export interface DocumentServiceController {
  uploadDocument(
    request: Observable<DocumentChunk>,
  ): Promise<UploadResponse> | Observable<UploadResponse> | UploadResponse;

  downloadDocument(request: DownloadRequest): Observable<DocumentChunk>;

  syncDocument(request: Observable<DocumentChunk>): Observable<DocumentChunk>;
}

export function DocumentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["downloadDocument"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DocumentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["uploadDocument", "syncDocument"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DocumentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOCUMENT_SERVICE_NAME = "DocumentService";
