// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface Empty {
}

export interface UserById {
  id: number;
}

export interface User {
  id: number;
  name: string;
  email: string;
}

export interface Users {
  users: User[];
}

export interface UserOrders {
  orders: Order[];
}

export interface Order {
  id: number;
  userId: number;
  status: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  findOne(request: UserById): Observable<User>;

  findAll(request: Empty): Observable<Users>;

  create(request: User): Observable<User>;

  getUserOrders(request: UserById): Observable<UserOrders>;
}

export interface UserServiceController {
  findOne(request: UserById): Promise<User> | Observable<User> | User;

  findAll(request: Empty): Promise<Users> | Observable<Users> | Users;

  create(request: User): Promise<User> | Observable<User> | User;

  getUserOrders(request: UserById): Promise<UserOrders> | Observable<UserOrders> | UserOrders;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOne", "findAll", "create", "getUserOrders"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
